// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GradeName {
  NUR
  KG1
  KG2
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}

enum CATEGORYNAME {
  NURSERY
  PRIMARY
  SECONDARY
}

enum SECTION {
  A
  B
}

enum GENDER {
  M
  F
}

enum ROLE {
  TEACHER
  ADMIN
}

model Category {
  id       String   @id @default(uuid())
  name     CATEGORYNAME
  grades   Grade[]
  exams    Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Grade {
  id         String    @id @default(uuid())
  name       GradeName
  categoryID String
  category   Category  @relation(fields: [categoryID], references: [id])
  student    Student[]
  teacher    Teacher[]
  assignment Assignment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Exam {
  id          String      @id @default(uuid())
  name        String
  categoryID  String
  totalMarks  String
  category    Category    @relation(fields: [categoryID], references: [id])
  nurresult   NurResult[]
  priresult   PriResult[]
  secresult   SecResult[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Session {
  id         String      @id @default(uuid())
  name       String      @unique
  student    Student[]
  nurresult  NurResult[]
  priresult  PriResult[]
  secresult  SecResult[]
  assignment Assignment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Student {
  name       String
  gradeID    String
  rollNO     String     @id
  Section    SECTION
  serialNO   String
  dob        DateTime?
  fathersName String 
  mothersName String  
  phone       String
  alternatePhone String?
  address      String
  refrehToken String?
  fcmToken     String?
  gender      GENDER
  aadhar      String?
  bloodGroup  String?
  sessionID  String
  session    Session    @relation(fields: [sessionID], references: [id])
  grade      Grade      @relation(fields: [gradeID], references: [id])
  nurresult  NurResult[]
  priresult  PriResult[]
  secresult  SecResult[]
  attendance Attendance[]
  notifications Notifications[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model NurResult {
  id             String    @id @default(uuid())
  studentID      String
  sessionID      String
  examID         String
  englishwritten Int       @default(-1)
  englishoral    Int       @default(-1)
  englishrhymes  Int       @default(-1)
  hindiwritten   Int       @default(-1)
  hindioral      Int       @default(-1)
  hindirhymes    Int       @default(-1)
  mathswritten   Int       @default(-1)
  mathsoral      Int       @default(-1)
  gs             Int       @default(-1)
  activity       Int       @default(-1)
  spelldict      Int       @default(-1)
  drawing        Int       @default(-1)
  pt             Int       @default(-1)
  conversation   Int       @default(-1)
  exam           Exam      @relation(fields: [examID], references: [id])
  student        Student   @relation(fields: [studentID], references: [rollNO], onDelete: Cascade)
  session        Session   @relation(fields: [sessionID], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PriResult {
  id         String    @id @default(uuid())
  studentID  String
  sessionID  String
  examID     String
  english    Int       @default(-1)
  hindi      Int       @default(-1)
  maths      Int       @default(-1)
  science    Int       @default(-1)
  sst        Int       @default(-1)
  computer   Int       @default(-1)
  gk         Int       @default(-1)
  valueedu   Int       @default(-1)
  sanskrit   Int       @default(-1)
  exam       Exam      @relation(fields: [examID], references: [id])
  student    Student   @relation(fields: [studentID], references: [rollNO], onDelete: Cascade)
  session    Session   @relation(fields: [sessionID], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt @default(now())
}

model SecResult {
  id         String    @id @default(uuid())
  studentID  String
  sessionID  String
  examID     String
  english    Int       @default(-1)
  hindi      Int       @default(-1)
  maths      Int       @default(-1)
  science    Int       @default(-1)
  sst        Int       @default(-1)
  exam       Exam      @relation(fields: [examID], references: [id])
  student    Student   @relation(fields: [studentID], references: [rollNO], onDelete: Cascade)
  session    Session   @relation(fields: [sessionID], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt @default(now())
}

model Teacher {
  id       String   @id @default(uuid())
  fullname String
  email    String   @unique
  password String
  gradeId  String
  section  SECTION
  allowed  Boolean  @default(false)
  role     ROLE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  grade    Grade   @relation(fields: [gradeId], references: [id])
}

model Assignment{
  id String @id @default(uuid())
  gradeId String
  subject String
  section SECTION
  assignment String
  sessionID String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  session Session @relation(fields: [sessionID], references: [id])
  grade Grade @relation(fields: [gradeId], references: [id])
}

model Notifications{
  id String @id @default(uuid())
  rollNO String
  title String
  body String
  student Student @relation(fields: [rollNO], references: [rollNO], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Attendance{
  id String @id @default(uuid())
  rollNO String
  date DateTime @default(now())
  student Student @relation(fields: [rollNO], references: [rollNO], onDelete: Cascade)
}